//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.34014.
// 
#pragma warning disable 1591

namespace Nop.Plugin.Payments.EPay.epay.subscriptionservice {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="SubscriptionSoap", Namespace="https://ssl.ditonlinebetalingssystem.dk/remote/subscription")]
    public partial class Subscription : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback deletesubscriptionOperationCompleted;
        
        private System.Threading.SendOrPostCallback authorizeOperationCompleted;
        
        private System.Threading.SendOrPostCallback getsubscriptionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getsubscription_byidsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getPbsErrorOperationCompleted;
        
        private System.Threading.SendOrPostCallback getEpayErrorOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Subscription() {
            this.Url = global::Nop.Plugin.Payments.EPay.Properties.Settings.Default.Nop_Plugin_Payments_EPay_epay_subscriptionservice_Subscription;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event deletesubscriptionCompletedEventHandler deletesubscriptionCompleted;
        
        /// <remarks/>
        public event authorizeCompletedEventHandler authorizeCompleted;
        
        /// <remarks/>
        public event getsubscriptionsCompletedEventHandler getsubscriptionsCompleted;
        
        /// <remarks/>
        public event getsubscription_byidsCompletedEventHandler getsubscription_byidsCompleted;
        
        /// <remarks/>
        public event getPbsErrorCompletedEventHandler getPbsErrorCompleted;
        
        /// <remarks/>
        public event getEpayErrorCompletedEventHandler getEpayErrorCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://ssl.ditonlinebetalingssystem.dk/remote/subscription/deletesubscription", RequestNamespace="https://ssl.ditonlinebetalingssystem.dk/remote/subscription", ResponseNamespace="https://ssl.ditonlinebetalingssystem.dk/remote/subscription", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool deletesubscription(int merchantnumber, long subscriptionid, string pwd, ref int epayresponse) {
            object[] results = this.Invoke("deletesubscription", new object[] {
                        merchantnumber,
                        subscriptionid,
                        pwd,
                        epayresponse});
            epayresponse = ((int)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void deletesubscriptionAsync(int merchantnumber, long subscriptionid, string pwd, int epayresponse) {
            this.deletesubscriptionAsync(merchantnumber, subscriptionid, pwd, epayresponse, null);
        }
        
        /// <remarks/>
        public void deletesubscriptionAsync(int merchantnumber, long subscriptionid, string pwd, int epayresponse, object userState) {
            if ((this.deletesubscriptionOperationCompleted == null)) {
                this.deletesubscriptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeletesubscriptionOperationCompleted);
            }
            this.InvokeAsync("deletesubscription", new object[] {
                        merchantnumber,
                        subscriptionid,
                        pwd,
                        epayresponse}, this.deletesubscriptionOperationCompleted, userState);
        }
        
        private void OndeletesubscriptionOperationCompleted(object arg) {
            if ((this.deletesubscriptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deletesubscriptionCompleted(this, new deletesubscriptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://ssl.ditonlinebetalingssystem.dk/remote/subscription/authorize", RequestNamespace="https://ssl.ditonlinebetalingssystem.dk/remote/subscription", ResponseNamespace="https://ssl.ditonlinebetalingssystem.dk/remote/subscription", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool authorize(
                    int merchantnumber, 
                    long subscriptionid, 
                    string orderid, 
                    int amount, 
                    int currency, 
                    int instantcapture, 
                    string group, 
                    string description, 
                    string email, 
                    string sms, 
                    string ipaddress, 
                    string pwd, 
                    ref int fraud, 
                    ref long transactionid, 
                    ref int pbsresponse, 
                    ref int epayresponse) {
            object[] results = this.Invoke("authorize", new object[] {
                        merchantnumber,
                        subscriptionid,
                        orderid,
                        amount,
                        currency,
                        instantcapture,
                        group,
                        description,
                        email,
                        sms,
                        ipaddress,
                        pwd,
                        fraud,
                        transactionid,
                        pbsresponse,
                        epayresponse});
            fraud = ((int)(results[1]));
            transactionid = ((long)(results[2]));
            pbsresponse = ((int)(results[3]));
            epayresponse = ((int)(results[4]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void authorizeAsync(
                    int merchantnumber, 
                    long subscriptionid, 
                    string orderid, 
                    int amount, 
                    int currency, 
                    int instantcapture, 
                    string group, 
                    string description, 
                    string email, 
                    string sms, 
                    string ipaddress, 
                    string pwd, 
                    int fraud, 
                    long transactionid, 
                    int pbsresponse, 
                    int epayresponse) {
            this.authorizeAsync(merchantnumber, subscriptionid, orderid, amount, currency, instantcapture, group, description, email, sms, ipaddress, pwd, fraud, transactionid, pbsresponse, epayresponse, null);
        }
        
        /// <remarks/>
        public void authorizeAsync(
                    int merchantnumber, 
                    long subscriptionid, 
                    string orderid, 
                    int amount, 
                    int currency, 
                    int instantcapture, 
                    string group, 
                    string description, 
                    string email, 
                    string sms, 
                    string ipaddress, 
                    string pwd, 
                    int fraud, 
                    long transactionid, 
                    int pbsresponse, 
                    int epayresponse, 
                    object userState) {
            if ((this.authorizeOperationCompleted == null)) {
                this.authorizeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnauthorizeOperationCompleted);
            }
            this.InvokeAsync("authorize", new object[] {
                        merchantnumber,
                        subscriptionid,
                        orderid,
                        amount,
                        currency,
                        instantcapture,
                        group,
                        description,
                        email,
                        sms,
                        ipaddress,
                        pwd,
                        fraud,
                        transactionid,
                        pbsresponse,
                        epayresponse}, this.authorizeOperationCompleted, userState);
        }
        
        private void OnauthorizeOperationCompleted(object arg) {
            if ((this.authorizeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.authorizeCompleted(this, new authorizeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://ssl.ditonlinebetalingssystem.dk/remote/subscription/getsubscriptions", RequestNamespace="https://ssl.ditonlinebetalingssystem.dk/remote/subscription", ResponseNamespace="https://ssl.ditonlinebetalingssystem.dk/remote/subscription", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool getsubscriptions(int merchantnumber, long subscriptionid, string pwd, ref SubscriptionInformationType[] subscriptionAry, ref int epayresponse) {
            object[] results = this.Invoke("getsubscriptions", new object[] {
                        merchantnumber,
                        subscriptionid,
                        pwd,
                        subscriptionAry,
                        epayresponse});
            subscriptionAry = ((SubscriptionInformationType[])(results[1]));
            epayresponse = ((int)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void getsubscriptionsAsync(int merchantnumber, long subscriptionid, string pwd, SubscriptionInformationType[] subscriptionAry, int epayresponse) {
            this.getsubscriptionsAsync(merchantnumber, subscriptionid, pwd, subscriptionAry, epayresponse, null);
        }
        
        /// <remarks/>
        public void getsubscriptionsAsync(int merchantnumber, long subscriptionid, string pwd, SubscriptionInformationType[] subscriptionAry, int epayresponse, object userState) {
            if ((this.getsubscriptionsOperationCompleted == null)) {
                this.getsubscriptionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetsubscriptionsOperationCompleted);
            }
            this.InvokeAsync("getsubscriptions", new object[] {
                        merchantnumber,
                        subscriptionid,
                        pwd,
                        subscriptionAry,
                        epayresponse}, this.getsubscriptionsOperationCompleted, userState);
        }
        
        private void OngetsubscriptionsOperationCompleted(object arg) {
            if ((this.getsubscriptionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getsubscriptionsCompleted(this, new getsubscriptionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://ssl.ditonlinebetalingssystem.dk/remote/subscription/getsubscription_byids" +
            "", RequestNamespace="https://ssl.ditonlinebetalingssystem.dk/remote/subscription", ResponseNamespace="https://ssl.ditonlinebetalingssystem.dk/remote/subscription", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool getsubscription_byids(int merchantnumber, string pwd, ref long[] subscription_ids, ref int epayresponse) {
            object[] results = this.Invoke("getsubscription_byids", new object[] {
                        merchantnumber,
                        pwd,
                        subscription_ids,
                        epayresponse});
            subscription_ids = ((long[])(results[1]));
            epayresponse = ((int)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void getsubscription_byidsAsync(int merchantnumber, string pwd, long[] subscription_ids, int epayresponse) {
            this.getsubscription_byidsAsync(merchantnumber, pwd, subscription_ids, epayresponse, null);
        }
        
        /// <remarks/>
        public void getsubscription_byidsAsync(int merchantnumber, string pwd, long[] subscription_ids, int epayresponse, object userState) {
            if ((this.getsubscription_byidsOperationCompleted == null)) {
                this.getsubscription_byidsOperationCompleted = new System.Threading.SendOrPostCallback(this.Ongetsubscription_byidsOperationCompleted);
            }
            this.InvokeAsync("getsubscription_byids", new object[] {
                        merchantnumber,
                        pwd,
                        subscription_ids,
                        epayresponse}, this.getsubscription_byidsOperationCompleted, userState);
        }
        
        private void Ongetsubscription_byidsOperationCompleted(object arg) {
            if ((this.getsubscription_byidsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getsubscription_byidsCompleted(this, new getsubscription_byidsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://ssl.ditonlinebetalingssystem.dk/remote/subscription/getPbsError", RequestNamespace="https://ssl.ditonlinebetalingssystem.dk/remote/subscription", ResponseNamespace="https://ssl.ditonlinebetalingssystem.dk/remote/subscription", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool getPbsError(int merchantnumber, int language, int pbsResponseCode, string pwd, ref string pbsResponseString, ref int epayresponse) {
            object[] results = this.Invoke("getPbsError", new object[] {
                        merchantnumber,
                        language,
                        pbsResponseCode,
                        pwd,
                        pbsResponseString,
                        epayresponse});
            pbsResponseString = ((string)(results[1]));
            epayresponse = ((int)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void getPbsErrorAsync(int merchantnumber, int language, int pbsResponseCode, string pwd, string pbsResponseString, int epayresponse) {
            this.getPbsErrorAsync(merchantnumber, language, pbsResponseCode, pwd, pbsResponseString, epayresponse, null);
        }
        
        /// <remarks/>
        public void getPbsErrorAsync(int merchantnumber, int language, int pbsResponseCode, string pwd, string pbsResponseString, int epayresponse, object userState) {
            if ((this.getPbsErrorOperationCompleted == null)) {
                this.getPbsErrorOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetPbsErrorOperationCompleted);
            }
            this.InvokeAsync("getPbsError", new object[] {
                        merchantnumber,
                        language,
                        pbsResponseCode,
                        pwd,
                        pbsResponseString,
                        epayresponse}, this.getPbsErrorOperationCompleted, userState);
        }
        
        private void OngetPbsErrorOperationCompleted(object arg) {
            if ((this.getPbsErrorCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getPbsErrorCompleted(this, new getPbsErrorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://ssl.ditonlinebetalingssystem.dk/remote/subscription/getEpayError", RequestNamespace="https://ssl.ditonlinebetalingssystem.dk/remote/subscription", ResponseNamespace="https://ssl.ditonlinebetalingssystem.dk/remote/subscription", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool getEpayError(int merchantnumber, int language, int epayresponsecode, string pwd, ref string epayResponseString, ref int epayresponse) {
            object[] results = this.Invoke("getEpayError", new object[] {
                        merchantnumber,
                        language,
                        epayresponsecode,
                        pwd,
                        epayResponseString,
                        epayresponse});
            epayResponseString = ((string)(results[1]));
            epayresponse = ((int)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void getEpayErrorAsync(int merchantnumber, int language, int epayresponsecode, string pwd, string epayResponseString, int epayresponse) {
            this.getEpayErrorAsync(merchantnumber, language, epayresponsecode, pwd, epayResponseString, epayresponse, null);
        }
        
        /// <remarks/>
        public void getEpayErrorAsync(int merchantnumber, int language, int epayresponsecode, string pwd, string epayResponseString, int epayresponse, object userState) {
            if ((this.getEpayErrorOperationCompleted == null)) {
                this.getEpayErrorOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetEpayErrorOperationCompleted);
            }
            this.InvokeAsync("getEpayError", new object[] {
                        merchantnumber,
                        language,
                        epayresponsecode,
                        pwd,
                        epayResponseString,
                        epayresponse}, this.getEpayErrorOperationCompleted, userState);
        }
        
        private void OngetEpayErrorOperationCompleted(object arg) {
            if ((this.getEpayErrorCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getEpayErrorCompleted(this, new getEpayErrorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.33440")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://ssl.ditonlinebetalingssystem.dk/remote/subscription")]
    public partial class SubscriptionInformationType {
        
        private long subscriptionidField;
        
        private string descriptionField;
        
        private System.DateTime createdField;
        
        private int expmonthField;
        
        private int expyearField;
        
        private CardType cardtypeidField;
        
        private TransactionInformationType[] transactionListField;
        
        /// <remarks/>
        public long subscriptionid {
            get {
                return this.subscriptionidField;
            }
            set {
                this.subscriptionidField = value;
            }
        }
        
        /// <remarks/>
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime created {
            get {
                return this.createdField;
            }
            set {
                this.createdField = value;
            }
        }
        
        /// <remarks/>
        public int expmonth {
            get {
                return this.expmonthField;
            }
            set {
                this.expmonthField = value;
            }
        }
        
        /// <remarks/>
        public int expyear {
            get {
                return this.expyearField;
            }
            set {
                this.expyearField = value;
            }
        }
        
        /// <remarks/>
        public CardType cardtypeid {
            get {
                return this.cardtypeidField;
            }
            set {
                this.cardtypeidField = value;
            }
        }
        
        /// <remarks/>
        public TransactionInformationType[] transactionList {
            get {
                return this.transactionListField;
            }
            set {
                this.transactionListField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.33440")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://ssl.ditonlinebetalingssystem.dk/remote/subscription")]
    public enum CardType {
        
        /// <remarks/>
        ALL,
        
        /// <remarks/>
        DANKORT,
        
        /// <remarks/>
        VISA_DANKORT,
        
        /// <remarks/>
        VISA_ELECTRON_FOREIGN,
        
        /// <remarks/>
        MASTERCARD,
        
        /// <remarks/>
        MASTERCARD_FOREIGN,
        
        /// <remarks/>
        VISA_ELECTRON,
        
        /// <remarks/>
        JCB,
        
        /// <remarks/>
        DINERS,
        
        /// <remarks/>
        MAESTRO,
        
        /// <remarks/>
        AMERICAN_EXPRESS,
        
        /// <remarks/>
        UNKNOWN,
        
        /// <remarks/>
        EDK,
        
        /// <remarks/>
        DINERS_FOREIGN,
        
        /// <remarks/>
        AMERICAN_EXPRESS_FOREIGN,
        
        /// <remarks/>
        MAESTRO_FOREIGN,
        
        /// <remarks/>
        FORBRUGSFORENINGEN,
        
        /// <remarks/>
        EWIRE,
        
        /// <remarks/>
        VISA,
        
        /// <remarks/>
        IKANO,
        
        /// <remarks/>
        OTHERS,
        
        /// <remarks/>
        NORDEA_SOLO,
        
        /// <remarks/>
        DANSKE_BANK,
        
        /// <remarks/>
        BG_BANK,
        
        /// <remarks/>
        LIC_MASTERCARD,
        
        /// <remarks/>
        LIC_MASTERCARD_FOREIGN,
        
        /// <remarks/>
        PAYPAL,
        
        /// <remarks/>
        MOBILPENGE,
        
        /// <remarks/>
        KLARNA,
        
        /// <remarks/>
        SVEA,
        
        /// <remarks/>
        SEB_DIREKTBETALNINGAR,
        
        /// <remarks/>
        NORDEA_SE_DIREKTBETALNING,
        
        /// <remarks/>
        HANDELSBANKEN_SE_DIREKTBETALNINGAR,
        
        /// <remarks/>
        SWEDBANK_DIREKTBETALNINGAR,
        
        /// <remarks/>
        IBILL,
        
        /// <remarks/>
        NEMPAY,
        
        /// <remarks/>
        IDEAL,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.33440")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://ssl.ditonlinebetalingssystem.dk/remote/subscription")]
    public partial class TransactionInformationType {
        
        private string groupField;
        
        private int authamountField;
        
        private int currencyField;
        
        private int cardtypeidField;
        
        private int capturedamountField;
        
        private int creditedamountField;
        
        private string orderidField;
        
        private string descriptionField;
        
        private System.DateTime authdateField;
        
        private System.DateTime captureddateField;
        
        private System.DateTime deleteddateField;
        
        private System.DateTime crediteddateField;
        
        private TransactionStatus statusField;
        
        private TransactionHistoryInfo[] historyField;
        
        private long transactionidField;
        
        private string cardholderField;
        
        private PayMode modeField;
        
        private bool mscField;
        
        private int fraudStatusField;
        
        private string fraudMessageField;
        
        private string payerCountryCodeField;
        
        private string issuedCountryCodeField;
        
        private int feeField;
        
        private bool splitpaymentField;
        
        private AcquirerType acquirerField;
        
        private string tcardnoField;
        
        private int expmonthField;
        
        private int expyearField;
        
        /// <remarks/>
        public string group {
            get {
                return this.groupField;
            }
            set {
                this.groupField = value;
            }
        }
        
        /// <remarks/>
        public int authamount {
            get {
                return this.authamountField;
            }
            set {
                this.authamountField = value;
            }
        }
        
        /// <remarks/>
        public int currency {
            get {
                return this.currencyField;
            }
            set {
                this.currencyField = value;
            }
        }
        
        /// <remarks/>
        public int cardtypeid {
            get {
                return this.cardtypeidField;
            }
            set {
                this.cardtypeidField = value;
            }
        }
        
        /// <remarks/>
        public int capturedamount {
            get {
                return this.capturedamountField;
            }
            set {
                this.capturedamountField = value;
            }
        }
        
        /// <remarks/>
        public int creditedamount {
            get {
                return this.creditedamountField;
            }
            set {
                this.creditedamountField = value;
            }
        }
        
        /// <remarks/>
        public string orderid {
            get {
                return this.orderidField;
            }
            set {
                this.orderidField = value;
            }
        }
        
        /// <remarks/>
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime authdate {
            get {
                return this.authdateField;
            }
            set {
                this.authdateField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime captureddate {
            get {
                return this.captureddateField;
            }
            set {
                this.captureddateField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime deleteddate {
            get {
                return this.deleteddateField;
            }
            set {
                this.deleteddateField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime crediteddate {
            get {
                return this.crediteddateField;
            }
            set {
                this.crediteddateField = value;
            }
        }
        
        /// <remarks/>
        public TransactionStatus status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        public TransactionHistoryInfo[] history {
            get {
                return this.historyField;
            }
            set {
                this.historyField = value;
            }
        }
        
        /// <remarks/>
        public long transactionid {
            get {
                return this.transactionidField;
            }
            set {
                this.transactionidField = value;
            }
        }
        
        /// <remarks/>
        public string cardholder {
            get {
                return this.cardholderField;
            }
            set {
                this.cardholderField = value;
            }
        }
        
        /// <remarks/>
        public PayMode mode {
            get {
                return this.modeField;
            }
            set {
                this.modeField = value;
            }
        }
        
        /// <remarks/>
        public bool msc {
            get {
                return this.mscField;
            }
            set {
                this.mscField = value;
            }
        }
        
        /// <remarks/>
        public int fraudStatus {
            get {
                return this.fraudStatusField;
            }
            set {
                this.fraudStatusField = value;
            }
        }
        
        /// <remarks/>
        public string FraudMessage {
            get {
                return this.fraudMessageField;
            }
            set {
                this.fraudMessageField = value;
            }
        }
        
        /// <remarks/>
        public string payerCountryCode {
            get {
                return this.payerCountryCodeField;
            }
            set {
                this.payerCountryCodeField = value;
            }
        }
        
        /// <remarks/>
        public string issuedCountryCode {
            get {
                return this.issuedCountryCodeField;
            }
            set {
                this.issuedCountryCodeField = value;
            }
        }
        
        /// <remarks/>
        public int fee {
            get {
                return this.feeField;
            }
            set {
                this.feeField = value;
            }
        }
        
        /// <remarks/>
        public bool splitpayment {
            get {
                return this.splitpaymentField;
            }
            set {
                this.splitpaymentField = value;
            }
        }
        
        /// <remarks/>
        public AcquirerType acquirer {
            get {
                return this.acquirerField;
            }
            set {
                this.acquirerField = value;
            }
        }
        
        /// <remarks/>
        public string tcardno {
            get {
                return this.tcardnoField;
            }
            set {
                this.tcardnoField = value;
            }
        }
        
        /// <remarks/>
        public int expmonth {
            get {
                return this.expmonthField;
            }
            set {
                this.expmonthField = value;
            }
        }
        
        /// <remarks/>
        public int expyear {
            get {
                return this.expyearField;
            }
            set {
                this.expyearField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.33440")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://ssl.ditonlinebetalingssystem.dk/remote/subscription")]
    public enum TransactionStatus {
        
        /// <remarks/>
        PAYMENT_UNDEFINED,
        
        /// <remarks/>
        PAYMENT_NEW,
        
        /// <remarks/>
        PAYMENT_CAPTURED,
        
        /// <remarks/>
        PAYMENT_DELETED,
        
        /// <remarks/>
        PAYMENT_INSTANT_CAPTURE_FAILED,
        
        /// <remarks/>
        PAYMENT_SUBSCRIPTION_INI,
        
        /// <remarks/>
        PAYMENT_RENEW,
        
        /// <remarks/>
        PAYMENT_EUROLINE_WAIT_CAPTURE,
        
        /// <remarks/>
        PAYMENT_EUROLINE_WAIT_CREDIT,
        
        /// <remarks/>
        PARTLY_TRANSACTION_HIDDEN,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.33440")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://ssl.ditonlinebetalingssystem.dk/remote/subscription")]
    public partial class TransactionHistoryInfo {
        
        private long transactionHistoryIDField;
        
        private int logonIDField;
        
        private string usernameField;
        
        private string eventMsgField;
        
        private System.DateTime createdField;
        
        /// <remarks/>
        public long transactionHistoryID {
            get {
                return this.transactionHistoryIDField;
            }
            set {
                this.transactionHistoryIDField = value;
            }
        }
        
        /// <remarks/>
        public int logonID {
            get {
                return this.logonIDField;
            }
            set {
                this.logonIDField = value;
            }
        }
        
        /// <remarks/>
        public string username {
            get {
                return this.usernameField;
            }
            set {
                this.usernameField = value;
            }
        }
        
        /// <remarks/>
        public string eventMsg {
            get {
                return this.eventMsgField;
            }
            set {
                this.eventMsgField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime created {
            get {
                return this.createdField;
            }
            set {
                this.createdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.33440")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://ssl.ditonlinebetalingssystem.dk/remote/subscription")]
    public enum PayMode {
        
        /// <remarks/>
        MODE_PRODUCTION,
        
        /// <remarks/>
        MODE_TEST,
        
        /// <remarks/>
        MODE_EPAY,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.33440")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://ssl.ditonlinebetalingssystem.dk/remote/subscription")]
    public enum AcquirerType {
        
        /// <remarks/>
        UNKNOWN,
        
        /// <remarks/>
        PBS,
        
        /// <remarks/>
        EUROLINE,
        
        /// <remarks/>
        DANSKE_BANK,
        
        /// <remarks/>
        NORDEA,
        
        /// <remarks/>
        EWIRE,
        
        /// <remarks/>
        SWEDBANK,
        
        /// <remarks/>
        PAYPAL,
        
        /// <remarks/>
        BABS_SWEDBANK,
        
        /// <remarks/>
        MOBILPENGE,
        
        /// <remarks/>
        KLARNA,
        
        /// <remarks/>
        SVEA,
        
        /// <remarks/>
        HANDELSBANKEN,
        
        /// <remarks/>
        SEB_DIREKT,
        
        /// <remarks/>
        NORDEA_SE_DIREKT,
        
        /// <remarks/>
        HANDELSBANKEN_DIREKT,
        
        /// <remarks/>
        SWEDBANK_DIREKT,
        
        /// <remarks/>
        IBILL,
        
        /// <remarks/>
        NEMPAY,
        
        /// <remarks/>
        IDEAL,
        
        /// <remarks/>
        OBETUR,
        
        /// <remarks/>
        EVRY_NORDEA_SE,
        
        /// <remarks/>
        EVRY_NORDEA_DK,
        
        /// <remarks/>
        EVRY_NORDEA_NO,
        
        /// <remarks/>
        EVRY_NORDEA_FI,
        
        /// <remarks/>
        MERCHANT4T,
        
        /// <remarks/>
        EVRY_HANDELSBANKEN_SE,
        
        /// <remarks/>
        EVRY_HANDELSBANKEN_DK,
        
        /// <remarks/>
        EVRY_HANDELSBANKEN_NO,
        
        /// <remarks/>
        EVRY_HANDELSBANKEN_FI,
        
        /// <remarks/>
        EVRY_ELAVON,
        
        /// <remarks/>
        EVRY_SWEDBANK,
        
        /// <remarks/>
        EVRY_EUROLINE,
        
        /// <remarks/>
        EVRY_TELLER,
        
        /// <remarks/>
        VALITOR,
        
        /// <remarks/>
        EPAY,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void deletesubscriptionCompletedEventHandler(object sender, deletesubscriptionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class deletesubscriptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal deletesubscriptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int epayresponse {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void authorizeCompletedEventHandler(object sender, authorizeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class authorizeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal authorizeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int fraud {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public long transactionid {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public int pbsresponse {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public int epayresponse {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[4]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void getsubscriptionsCompletedEventHandler(object sender, getsubscriptionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getsubscriptionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getsubscriptionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public SubscriptionInformationType[] subscriptionAry {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SubscriptionInformationType[])(this.results[1]));
            }
        }
        
        /// <remarks/>
        public int epayresponse {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void getsubscription_byidsCompletedEventHandler(object sender, getsubscription_byidsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getsubscription_byidsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getsubscription_byidsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public long[] subscription_ids {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long[])(this.results[1]));
            }
        }
        
        /// <remarks/>
        public int epayresponse {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void getPbsErrorCompletedEventHandler(object sender, getPbsErrorCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getPbsErrorCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getPbsErrorCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string pbsResponseString {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public int epayresponse {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void getEpayErrorCompletedEventHandler(object sender, getEpayErrorCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getEpayErrorCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getEpayErrorCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string epayResponseString {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public int epayresponse {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[2]));
            }
        }
    }
}

#pragma warning restore 1591